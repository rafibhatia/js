css
 is the tool that allows you to customize the html structured 
 Lesson overview :
 	add style to gtml  with css
 	understand how to use class and id attributes 
 	add styles to specific elements usingthe correct aelectors

at the most basic level css is made up of various rules theses rules are amde up of a selector and a semicolon separated list of declarations with each of those declarations begin made up a property value pair
.main {
	color: blue;}
so there are a couple of types of selectors 
UNIVERSAL selector 
* {
	color: purple;

}
this applisy the property value pair to ever element 

TYPE selector 
div {
color:green;
}
CLASS selector
<div class="home-page">wlcome to the home page</div>
home-page{
color:green;
}

ID selector which are like class but are defind by id insedad of class and in the style sheet you use the # insead of .

THE GROUPING selecotr so what happens if two groups of elements that share some of their style dexlarations 
.read {
  color: white;
  background-color: black;
  /* several unique declarations */
}

.unread {
  color: white;
  background-color: black;
  /* several unique declarations */
}
Both our .read and .unread selectors share the color: white; and background-color: black; declarations, but otherwise have several of their own unique declarations. To cut down on the repetition, we can group these two selectors together as a comma-separated list:
.read,
.unread {
  color: white;
  background-color: black;
}

.read {
  /* several unique declarations */
}

.unread {
  /* several unique declarations */
}
Chaining selectors



Another way to use selectors is to chain them as a list without any separation. Let’s say we had the following HTML:

<div>
  <div class="subsection header">Latest Posts</div>
  <p class="subsection preview">This is where a preview for a post might go.</p>
</div>

We have two elements with the subsection class that have some sort of unique styles, but what if we only want to apply a separate rule to the element that also has header as a second class? Well, we could chain both the class selectors together in our CSS like so:

.subsection.header {
  color: red;
}

What .subsection.header does is it selects any element that has both the subsection and header classes. Notice how there isn’t any space between the .subsection and .header class selectors. This syntax basically works for chaining any combination of selectors, except for chaining more than one type selector.

This can also be used to chain a class and an ID, as shown below:

<div>
  <div class="subsection header">Latest Posts</div>
  <p class="subsection" id="preview">
    This is where a preview for a post might go.
  </p>
</div>

You can take the two elements above and combine them with the following:

.subsection.header {
  color: red;
}

.subsection#preview {
  color: blue;
}

In general, you can’t chain more than one type selector since an element can’t be two different types at once. For example, chaining two type selectors like div and p would give us the selector divp, which wouldn’t work since the selector would try to find a literal <divp> element, which doesn’t exist.
Descendant combinator

Combinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors. There are four types of combinators in total, but for right now we’re going to only show you the descendant combinator, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc.) that matches the previous selector.

So something like .ancestor .child would select an element with the class child if it has an ancestor with the class ancestor. Another way to think of it is that child will only be selected if it is nested inside ancestor, regardless of how deep that nesting is. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:

<!-- index.html -->

<div class="ancestor">
  <!-- A -->
  <div class="contents">
    <!-- B -->
    <div class="contents"><!-- C --></div>
  </div>
</div>

<div class="contents"><!-- D --></div>

/* styles.css */

.ancestor .contents {
  /* some declarations */
}

In the above example, the first two elements with the contents class (B and C) would be selected, but that last element (D) wouldn’t be. Was your guess correct?

There’s really no limit to how many combinators you can add to a rule, so .one .two .three .four would be totally valid. This would just select an element that has a class of four if it has an ancestor with a class of three, and if that ancestor has its own ancestor with a class of two, and so on. You generally want to avoid trying to select elements that need this level of nesting, though, as it can get pretty confusing and long, and it can cause issues when it comes to specificit


there are a couple of ways to add css to html 
one is external css 
use the link element in the head tag 

internal css you could could place the style tag in the head and the just to your thing like this <head>
  <style>
    div {
      color: white;
      background-color: black;
    }

    p {
      color: red;
    }
  </style>
</head>
<body>
  ...
</body>


inline css which you could add directly to html elements useing the style attribute
<body>
  <div style="color: white; background-color: black;">...</div>
</body>

